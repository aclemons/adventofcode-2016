#!/usr/bin/env elixir

# MIT License

# Copyright (c) 2016 Andrew Clemons

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

result = IO.stream(:stdio, :line) |> Enum.map(&String.rstrip(&1)) |>
  Enum.map(fn(x) ->
    pair = String.split(x, "-")
    [String.to_integer(Enum.at(pair, 0)), String.to_integer(Enum.at(pair, 1))]
  end) |>
  Enum.sort_by(&Enum.at(&1, 0)) |>
  Enum.reduce([0, nil, 0], fn(range, lowest) -> #[current_index, lowest_match, running_total]
    cond do
      Enum.at(lowest, 0) >= Enum.at(range, 0) && Enum.at(lowest, 0) <= Enum.at(range, 1)->
        [Enum.at(range, 1) + 1, Enum.at(lowest, 1), Enum.at(lowest, 2)]
      Enum.at(lowest, 0) > Enum.at(range, 0) && Enum.at(lowest, 0) >= Enum.at(range, 1) ->
        lowest
      true ->
        [
          Enum.at(range, 1) + 1,
          case Enum.at(lowest, 1) == nil do
            true -> Enum.at(lowest, 0)
            false -> Enum.at(lowest, 1)
          end,
          Enum.at(lowest, 2) + (Enum.at(range, 0) - Enum.at(lowest, 0))
        ]
    end
  end)

final_result = case Enum.at(result, 0) < 4294967295 do
                 true -> [Enum.at(result, 0), Enum.at(result, 1), Enum.at(result, 2) + (4294967295 - Enum.at(result, 0))]
                 false -> result
               end

IO.puts("The lowest-valued IP that is not blocked is " <> to_string(Enum.at(final_result, 1)))
IO.puts(to_string(Enum.at(final_result, 2)) <> " IPs are allowed by the blacklist")
