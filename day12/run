#!/usr/bin/env tclsh
#
# MIT License
#
# Copyright (c) 2016 Andrew Clemons
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

proc evaluate {} {
    set line_count [llength $::lines]

    set i 0
    while {$i < $line_count} {
        set line [lindex $::lines $i]

        set pieces [split $line]
        set op [lindex $pieces 0]

        if {[expr {"$op" eq "cpy"}]} {
            set value [lindex $pieces 1]

            if {![string is entier $value]} {
                set value $::registers($value)
            }

            set register [lindex $pieces 2]

            set ::registers($register) [expr "$value * 1"]
        } elseif {[expr {"$op" eq "jnz"}]} {
            set value [lindex $pieces 1]

            if {![string is entier $value]} {
                if {![info exists ::registers($value)]} {
                    set ::registers($value) 0
                }

                set value $::registers($value)
            }

            if {![expr { $value == 0 }]} {
                set offset [lindex $pieces 2]
                set i [expr $i + $offset]
                continue
            }
        } elseif {[expr {"$op" eq "inc"}] || [expr {"$op" eq "dec"}]} {
            set register [lindex $pieces 1]

            if {[expr {"$op" eq "dec"}]} {
                set op "-"
            } else {
                set op "+"
            }

            if {![info exists ::registers($register)]} {
                set ::registers($register) [0]
            }

            set value $::registers($register)

            set ::registers($register) [expr "$value $op 1"]
            set value $::registers($register)
        }

        incr i
    }

    return $::registers(a)
}

global lines
global registers

set data [read stdin]
set lines [split $data \n]

array set ::registers {}

set result [evaluate]
puts "The value of register a is $result"

array set ::registers {}
set ::registers(c) 1

set result [evaluate]
puts "The value of register a with register c initialised to 1 is $result"
