#!/usr/bin/env scala

// MIT License
//
// Copyright (c) 2016 Andrew Clemons
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

val validTriangle = { (edges: Array[Int]) =>
  Array(
    Seq(edges(0), edges(1), edges(2)),
    Seq(edges(0), edges(2), edges(1)),
    Seq(edges(1), edges(2), edges(0))
  ).filter(sides => sides(0) + sides(1) <= sides(2)).isEmpty
}

var lines = (if (args.size == 0)
  io.Source.stdin.getLines()
else
  scala.io.Source.fromFile(args(0)).getLines()
).map(line => line.trim.split("\\s+").map(_.toInt)).toArray

val validCount = lines
  .filter(validTriangle)
  .size

val validCountVertical = (0 to (lines(0).size - 1))
  .map(column => lines.map(row => row(column)))
  .map(column => column.grouped(3).toList)
  .flatten.toArray
  .filter(validTriangle)
  .size

println(s"$validCount of the listed triangles are possible")
println(s"$validCountVertical of the listed triangles handled vertically are possible")
